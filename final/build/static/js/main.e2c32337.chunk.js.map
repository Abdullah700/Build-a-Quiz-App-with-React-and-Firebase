{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/home.js","components/question.js","components/progressBar.js","components/hud.js","components/saveScoreForm.js","components/game.js","components/highScores.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","scores","db","ref","app","initializeApp","this","database","home","id","className","to","Question","state","classToApply","selectedAnswer","answering","question","dangerouslySetInnerHTML","__html","answerChoices","map","choice","index","key","onClick","checkAnswer","answer","bonus","setState","setTimeout","changeQuestion","progressBar","max","width","current","style","hud","score","questionNumber","saveHighScore","e","preventDefault","record","name","username","push","scoreSaved","onInputChange","target","text","value","onSubmit","type","placeholder","onChange","disabled","Game","history","convertQuestionsFromAPI","rawQuestions","loadedQuestion","formattedQuestion","incorrect_answers","Math","floor","random","splice","correct_answer","questions","length","done","randomQuestionIndex","currentQuestion","filter","loading","fetch","then","res","json","results","formatScoreData","firebaseScores","val","sort","score1","score2","slice","on","snapshot","data","sortedScores","off","App","exact","path","component","Home","HighScores","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2c32337.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = (Component) => (props) => (\n    <FirebaseContext.Consumer>\n        {(firebase) => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.db = app.database();\n    }\n\n    //  ***Scores API***\n    scores = () => this.db.ref('scores');\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function home() {\n    return (\n        <div id=\"home\" className=\"container\">\n            <h1>Quiz App</h1>\n            <Link to=\"/game\" className=\"btn\">\n                Start Game\n            </Link>\n            <Link to=\"/highScores\" className=\"btn\">\n                High Scores\n            </Link>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default class Question extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classToApply: '',\n            selectedAnswer: -1,\n            answering: false\n        };\n    }\n    render() {\n        const { question } = this.props;\n        return (\n            <div>\n                <h2\n                    id=\"question\"\n                    dangerouslySetInnerHTML={{ __html: question.question }}\n                />\n                {question.answerChoices.map((choice, index) => (\n                    <div\n                        key={index}\n                        className={`choice-container ${this.state\n                            .selectedAnswer === index &&\n                            this.state.classToApply}`}\n                        onClick={() => this.checkAnswer(question, index)}\n                    >\n                        <p className=\"choice-prefix\">{index + 1}</p>\n                        <p\n                            className=\"choice-text\"\n                            dangerouslySetInnerHTML={{ __html: choice }}\n                        ></p>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    checkAnswer(question, selectedAnswer) {\n        if (!this.state.answering) {\n            const classToApply =\n                selectedAnswer === question.answer ? 'correct' : 'incorrect';\n            const bonus = selectedAnswer === question.answer ? 10 : 0;\n            this.setState({\n                classToApply,\n                selectedAnswer,\n                answering: true\n            });\n            setTimeout(() => {\n                this.setState({\n                    selectedAnswer: -1,\n                    answering: false\n                });\n                this.props.changeQuestion(bonus);\n            }, 1000);\n        }\n    }\n}\n","import React from 'react';\n\nexport default function progressBar({ max, current }) {\n    const width = (current / max) * 100;\n    return (\n        <div id=\"progressBar\">\n            <div id=\"progressBarFull\" style={{ width: `${width}%` }} />\n        </div>\n    );\n}\n","import React from 'react';\nimport ProgressBar from './progressBar';\n\nexport default function hud({ score, questionNumber }) {\n    return (\n        <div id=\"hud\">\n            <div id=\"hud-item\">\n                <p id=\"progressText\" className=\"hud-prefix\">\n                    {`Question ${questionNumber}/10`}\n                </p>\n                <ProgressBar max={10} current={questionNumber} />\n            </div>\n            <div id=\"hud-item\">\n                <p className=\"hud-prefix\">Score</p>\n                <h1 className=\"hud-main-text\" id=\"score\">\n                    {score}\n                </h1>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withFirebase } from './Firebase';\nclass saveScoreForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: ''\n        };\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <h1 id=\"finalScore\">{this.props.score}</h1>\n                <form onSubmit={(e) => this.saveHighScore(e)}>\n                    <input\n                        type=\"text\"\n                        name=\"username\"\n                        id=\"username\"\n                        placeholder=\"username\"\n                        value={this.state.username}\n                        onChange={this.onInputChange}\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"btn\"\n                        id=\"saveScoreBtn\"\n                        disabled={!this.state.username}\n                    >\n                        Save\n                    </button>\n                </form>\n                <Link to=\"/\" className=\"btn\">\n                    Go Home\n                </Link>\n            </div>\n        );\n    }\n\n    saveHighScore = (e) => {\n        e.preventDefault();\n        const record = {\n            name: this.state.username,\n            score: this.props.score\n        };\n        this.props.firebase.scores().push(record, () => {\n            this.props.scoreSaved();\n        });\n    };\n\n    onInputChange = (e) => {\n        const name = e.target.name;\n        const text = e.target.value;\n        this.setState({ [name]: text });\n    };\n}\n\nexport default withFirebase(saveScoreForm);\n","import React from 'react';\nimport Question from './question';\nimport HUD from './hud';\nimport SaveHighScoreForm from './saveScoreForm';\nexport default class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: {},\n            currentQuestion: null,\n            loading: true,\n            score: 0,\n            questionNumber: 0,\n            done: false\n        };\n    }\n\n    componentDidMount() {\n        fetch(\n            'https://opentdb.com/api.php?amount=3&category=9&difficulty=easy&type=multiple'\n        )\n            .then((res) => {\n                return res.json();\n            })\n            .then(({ results }) => {\n                const questions = this.convertQuestionsFromAPI(results);\n                this.setState({ questions }, () => {\n                    this.changeQuestion();\n                });\n            });\n    }\n\n    render() {\n        const {\n            loading,\n            currentQuestion,\n            questionNumber,\n            score,\n            done\n        } = this.state;\n        return (\n            <div className=\"container\">\n                <div id=\"loader\" className={loading ? '' : 'hidden'} />\n                {!done && (\n                    <div id=\"game\" className={loading ? 'hidden' : ''}>\n                        <HUD questionNumber={questionNumber} score={score} />\n                        {currentQuestion && (\n                            <Question\n                                question={currentQuestion}\n                                changeQuestion={this.changeQuestion}\n                            />\n                        )}\n                    </div>\n                )}\n                {done && (\n                    <SaveHighScoreForm\n                        score={score}\n                        history={this.props.history}\n                        scoreSaved={this.scoreSaved}\n                    />\n                )}\n            </div>\n        );\n    }\n\n    scoreSaved = () => {\n        this.props.history.push('/');\n    };\n\n    convertQuestionsFromAPI = (rawQuestions) => {\n        return rawQuestions.map((loadedQuestion) => {\n            const formattedQuestion = {\n                question: loadedQuestion.question\n            };\n\n            formattedQuestion.answerChoices = [\n                ...loadedQuestion.incorrect_answers\n            ];\n            formattedQuestion.answer = Math.floor(Math.random() * 4);\n            formattedQuestion.answerChoices.splice(\n                formattedQuestion.answer,\n                0,\n                loadedQuestion.correct_answer\n            );\n            return formattedQuestion;\n        });\n    };\n\n    changeQuestion = (bonus = 0) => {\n        this.setState(\n            {\n                score: this.state.score + bonus\n            },\n            () => {\n                if (this.state.questions.length <= 0) {\n                    this.setState({\n                        done: true\n                    });\n                } else {\n                    const randomQuestionIndex = Math.floor(\n                        Math.random() * this.state.questions.length\n                    );\n                    const currentQuestion = this.state.questions[\n                        randomQuestionIndex\n                    ];\n                    const questions = this.state.questions.filter(\n                        (questions, index) => index !== randomQuestionIndex\n                    );\n\n                    this.setState({\n                        loading: false,\n                        questions,\n                        currentQuestion,\n                        questionNumber: this.state.questionNumber + 1\n                    });\n                }\n            }\n        );\n    };\n}\n","import React from 'react';\nimport { withFirebase } from './Firebase';\n\nclass HighScores extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            scores: []\n        };\n    }\n\n    componentDidMount() {\n        this.props.firebase.scores().on('value', (snapshot) => {\n            const data = snapshot.val();\n            const sortedScores = this.formatScoreData(data);\n            this.setState({ scores: sortedScores });\n        });\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.scores().off();\n    }\n\n    render() {\n        const { scores } = this.state;\n        return (\n            <div className=\"container\">\n                <div id=\"highScoresList\">\n                    <h1>HIGH SCORES</h1>\n                    {scores.map((score) => (\n                        <li key={score.key} className=\"high-score\">\n                            {score.name} - {score.score}\n                        </li>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    formatScoreData = (firebaseScores) => {\n        const scores = [];\n        for (let key in firebaseScores) {\n            const val = firebaseScores[key];\n            val['key'] = key;\n            scores.push(val);\n        }\n        const sortedScores = scores\n            .sort((score1, score2) => score2.score - score1.score)\n            .slice(0, 10);\n        return sortedScores;\n    };\n}\n\nexport default withFirebase(HighScores);\n","import React from 'react';\nimport './App.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './components/home';\nimport Game from './components/game';\nimport HighScores from './components/highScores';\nconst App = () => {\n    return (\n        <Router>\n            <div>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/game\" component={Game} />\n                <Route path=\"/highScores\" component={HighScores} />\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, { FirebaseContext } from './components/Firebase';\nimport App from './App';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}